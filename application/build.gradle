//region Startup Plugins

apply plugin: "com.android.application"
apply plugin: "com.google.firebase.appdistribution"
apply plugin: "com.google.firebase.crashlytics"
apply plugin: "com.google.gms.google-services"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "androidx.navigation.safeargs.kotlin"

//endregion

//region Keystore

def keystorePropertiesFile = rootProject.file("settings/keystore/keystore.properties")
if (!keystorePropertiesFile.exists()) {
  keystorePropertiesFile.createNewFile()
}
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

//endregion

//region Android

android {

  namespace "com.jakmos.itemistevolved"

  //region Build Configuration

  testBuildType obtainTestBuildType()

  signingConfigs {
    debug {
      keyAlias = "androiddebugkey"
      keyPassword = "android"
      storePassword = "android"
      storeFile = rootProject.file("settings/keystore/debug.jks")
    }

    release {
      keyAlias = keystoreProperties['keyAlias']
      keyPassword = keystoreProperties['keyPassword']
      storePassword = keystoreProperties['storePassword']
      storeFile = rootProject.file("settings/keystore/release.jks")
    }
  }

  buildTypes {
    debug {
      minifyEnabled = false
      signingConfig = signingConfigs.debug
    }
    release {
      minifyEnabled = true
      shrinkResources true
      signingConfig = signingConfigs.release
      proguardFiles getDefaultProguardFile("proguard-android.txt"),
          rootProject.file("settings/proguard/proguard-rules.pro")
      testProguardFiles getDefaultProguardFile("proguard-android.txt"),
          rootProject.file("settings/proguard/proguard-rules.pro")
    }
  }

  //endregion

  //region Compile Options

  compileSdkVersion libs.versions.compile.sdk.get()

  compileOptions {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
  }

  //endregion

  //region Data Binding

  buildFeatures {
    dataBinding = true
    viewBinding true
  }

  //endregion

  //region Default Config

  defaultConfig {
    minSdkVersion libs.versions.min.sdk.get()
    targetSdkVersion libs.versions.target.sdk.get()
    applicationId "com.jakmos.itemistevolved"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    testInstrumentationRunnerArguments clearPackageData: 'true'
  }

  testOptions {
    execution 'ANDROIDX_TEST_ORCHESTRATOR'
  }

  //endregion

  //region Flavor Dimensions

  flavorDimensions "type"

  //endregion

  //region Gradle Properties

  //endregion

  //region Kotlin Options

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_11
  }

  //endregion

  //region Product Flavors

  productFlavors {
    dev {
      applicationIdSuffix = ".dev"
      dimension "type"
      firebaseAppDistribution {
        releaseNotesFile = rootProject.file("settings/distribute/release-notes.txt")
        serviceCredentialsFile =
            rootProject.file("settings/distribute/firebase-app-distribution.json")
        groups = "internal"
      }
      resValue "string", "app_name", getProjectName() + " Development"
      versionCode = getAutoVersionCode()
      versionName = getAutoVersionName() + " (dev)"
    }
    prod {
      dimension "type"
      firebaseAppDistribution {
        releaseNotesFile = rootProject.file("settings/distribute/release-notes.txt")
        serviceCredentialsFile =
            rootProject.file("settings/distribute/firebase-app-distribution.json")
        groups = "internal"
      }
      resValue "string", "app_name", getProjectName()
      versionCode = getAutoVersionCode()
      versionName = getAutoVersionName()
    }
  }

  // Print version code and name.
  printVersionCode()

  //endregion
}

//endregion

//region Dependencies

dependencies {

  //region Application Files

  implementation fileTree(dir: "libs", include: ["*.jar"])

  //endregion

  //region Application Modules

  implementation project(":domain")

  //endregion

  //region AndroidX

  implementation libs.androidx.constraint
  implementation libs.androidx.navigation.fragment
  implementation libs.androidx.navigation.ui
  implementation libs.androidx.recyclerview
  implementation libs.androidx.swiperefreshlayout

  //endregion

  //region Dependency Injection

  compileOnly libs.dagger.annotation
  kapt libs.dagger.android.processor
  kapt libs.dagger.compiler

  //endregion

  //region Fast Adapter

  implementation libs.fast.adapter.binding
  implementation libs.fast.adapter.core
  implementation libs.fast.adapter.diff
  implementation libs.fast.adapter.drag
  implementation libs.fast.adapter.expandable
  implementation libs.fast.adapter.ui
  implementation libs.fast.adapter.utils

  //endregion

  //region Firebase

  implementation libs.firebase.analytics
  implementation libs.firebase.crashlytics
  implementation libs.firebase.messaging

  //endregion

  //region Ui

  implementation libs.lottie
  implementation libs.material.dialogs

  //endregion

  //region Kotlin

  implementation libs.kotlin.coroutines

  //endregion

  //region Unit, Instrumentation and Integration Test

  androidTestImplementation libs.test.barista
  androidTestImplementation libs.test.espresso
  androidTestImplementation libs.test.junit.ktx
  androidTestImplementation libs.test.mockito.core
  androidTestImplementation libs.test.mockito.inline
  androidTestImplementation libs.test.rules
  androidTestImplementation libs.test.runner
  androidTestImplementation libs.test.test.core
  androidTestImplementation libs.test.truth
  androidTestUtil libs.test.orchestrator

  testImplementation libs.test.core.testing
  testImplementation libs.test.coroutines.test
  testImplementation libs.test.junit
  testImplementation libs.test.mockito.core
  testImplementation libs.test.mockito.inline
  testImplementation libs.test.truth

  //endregion
}

//endregion


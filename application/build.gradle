//region Startup Plugins

apply plugin: "com.android.application"
apply plugin: "com.google.firebase.appdistribution"
apply plugin: "com.google.firebase.crashlytics"
apply plugin: "com.google.gms.google-services"
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "androidx.navigation.safeargs.kotlin"

//endregion

//region Keystore

def keystorePropertiesFile = rootProject.file("settings/keystore/keystore.properties")
if (!keystorePropertiesFile.exists()) {
  keystorePropertiesFile.createNewFile()
}
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

//endregion

//region Android

android {

  //region Build Configuration

  testBuildType obtainTestBuildType()

  signingConfigs {
    debug {
      keyAlias = "androiddebugkey"
      keyPassword = "android"
      storePassword = "android"
      storeFile = rootProject.file("settings/keystore/debug.jks")
    }

    release {
      keyAlias = keystoreProperties['keyAlias']
      keyPassword = keystoreProperties['keyPassword']
      storePassword = keystoreProperties['storePassword']
      storeFile = rootProject.file("settings/keystore/release.jks")
    }
  }

  buildTypes {
    debug {
      minifyEnabled = false
      signingConfig = signingConfigs.debug
    }
    release {
      minifyEnabled = true
      shrinkResources true
      signingConfig = signingConfigs.release
      proguardFiles getDefaultProguardFile("proguard-android.txt"),
          rootProject.file("settings/proguard/proguard-rules.pro")
      testProguardFiles getDefaultProguardFile("proguard-android.txt"),
          rootProject.file("settings/proguard/proguard-rules.pro")
    }
  }

  //endregion

  //region Compile Options

  compileSdkVersion deps.build_versions.compile_sdk

  compileOptions {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
  }

  //endregion

  //region Data Binding

  buildFeatures {
    dataBinding = true
    viewBinding true
  }

  //endregion

  //region Default Config

  defaultConfig {
    minSdkVersion deps.build_versions.min_sdk
    targetSdkVersion deps.build_versions.target_sdk
    applicationId "com.jakmos.itemistevolved"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    testInstrumentationRunnerArguments clearPackageData: 'true'
  }

  testOptions {
    execution 'ANDROIDX_TEST_ORCHESTRATOR'
  }

  //endregion

  //region Flavor Dimensions

  flavorDimensions "type"

  //endregion

  //region Gradle Properties

  //endregion

  //region Kotlin Options

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8
  }

  //endregion

  //region Product Flavors

  productFlavors {
    dev {
      applicationIdSuffix = ".dev"
      dimension "type"
      firebaseAppDistribution {
        releaseNotesFile = rootProject.file("settings/distribute/release-notes.txt")
        serviceCredentialsFile =
            rootProject.file("settings/distribute/firebase-app-distribution.json")
        groups = "internal"
      }
      resValue "string", "app_name", getProjectName() + " Development"
      versionCode = getAutoVersionCode()
      versionName = getAutoVersionName() + " (dev)"
    }
    prod {
      dimension "type"
      firebaseAppDistribution {
        releaseNotesFile = rootProject.file("settings/distribute/release-notes.txt")
        serviceCredentialsFile =
            rootProject.file("settings/distribute/firebase-app-distribution.json")
        groups = "internal"
      }
      resValue "string", "app_name", getProjectName()
      versionCode = getAutoVersionCode()
      versionName = getAutoVersionName()
    }
  }

  // Print version code and name.
  printVersionCode()

  //endregion
}

//endregion

//region Dependencies

dependencies {

  //region Application Files

  implementation fileTree(dir: "libs", include: ["*.jar"])

  //endregion

  //region Application Modules

  implementation project(":domain")

  //endregion

  //region AndroidX

  implementation deps.androidx.constraint
  implementation deps.androidx.navigation_fragment
  implementation deps.androidx.navigation_ui
  implementation deps.androidx.recyclerview
  implementation deps.androidx.swiperefreshlayout

  //endregion

  //region Dependency Injection

  compileOnly deps.dagger.annotation
  kapt deps.dagger.compiler

  api deps.dagger.hilt_android
  kapt deps.dagger.hilt_compiler
  api deps.dagger.hilt_viewmodel

  //endregion

  //region Fast Adapter

  implementation deps.fast_adapter.binding
  implementation deps.fast_adapter.core
  implementation deps.fast_adapter.diff
  implementation deps.fast_adapter.drag
  implementation deps.fast_adapter.expandable
  implementation deps.fast_adapter.ui
  implementation deps.fast_adapter.utils

  //endregion

  //region Firebase

  implementation deps.firebase.analytics
  implementation deps.firebase.crashlytics
  implementation deps.firebase.messaging

  //endregion

  //region Ui

  implementation deps.ui.lottie
  implementation deps.ui.material_dialogs

  //endregion

  //region Kotlin

  implementation deps.kotlin.coroutines

  //endregion

  //region Unit, Instrumentation and Integration Test

  androidTestImplementation deps.test.barista
  androidTestImplementation deps.test.espresso
  androidTestImplementation deps.test.junit_ktx
  androidTestImplementation deps.test.mockito_core
  androidTestImplementation deps.test.mockito_inline
  androidTestImplementation deps.test.rules
  androidTestImplementation deps.test.runner
  androidTestImplementation deps.test.test_core
  androidTestImplementation deps.test.truth
  androidTestUtil deps.test.orchestrator

  testImplementation deps.test.core_testing
  testImplementation deps.test.coroutines_test
  testImplementation deps.test.junit
  testImplementation deps.test.mockito_core
  testImplementation deps.test.mockito_inline
  testImplementation deps.test.truth

  //endregion
}

//endregion


import java.text.SimpleDateFormat
import groovy.json.JsonSlurper

//region Build Script

buildscript {
    ext {
        kotlin_version = '1.3.72'
    }
    repositories {
        apply from: "versions.gradle"
        addRepos(repositories)
    }
    dependencies {
        classpath deps.build.android_gradle_plugin
        classpath deps.build.firebase_appdistribution
        classpath deps.build.firebase_crashlytics
        classpath deps.build.google_services_plugin
        classpath deps.build.kotlin_gradle_plugin
        classpath deps.build.navigation_safe_args
    }
}

//endregion

//region All Projects

allprojects {
    repositories {
        addRepos(repositories)
    }
}

//endregion

//region Tasks

task clean(type: Delete) {
    delete rootProject.buildDir
}

task downloadReleaseNotesTask {
    doLast {
        downloadReleaseNotes(github_token)
    }
}

task setPermissionsForCacheTask {
    doLast {
        project.exec {
            commandLine 'chmod', '755', '-R', '~/.gradle/caches', '&&', 'chmod', '755', '-R',
                '~/.gradle/wrapper', '&&', 'chmod', '755', '-R', '~/.android/build-cache'
        }
    }
}

task createReleaseNotesTask {
    doLast {
        def latestCommit = getLatestSavedCommit()
        def releaseNotes = getReleaseNotes()

        file("settings/distribute/release-notes.txt").text = releaseNotes

        printf("\n\n---------------- RELEASE NOTES (since commit: ${latestCommit}) ----------------\n")
        println("cat settings/distribute/release-notes.txt".execute().text.trim())
        printf("\n-------------------------------------------------------------------\n")
    }
}

//endregion

//region Naming

@SuppressWarnings("GroovyUnusedDeclaration")
static def getProjectName() {
    return "ItemistEvolved"
}

//endregion

//region Versioning

@SuppressWarnings("GroovyUnusedDeclaration")
static def printVersionCode() {
    printf("\n---------- VERSION DATA ----------\n")
    printf("-> CODE: ${getAutoVersionCode()}\n")
    printf("-> NAME: ${getAutoVersionName()}\n")
    printf("\n")
    printf("-> CURRENT_BRANCH: ${getCurrentBranch()}\n")
    printf("-> COMMIT_COUNT: ${getGitCommitsCount()}\n")
    printf("-> DEV_VERSION_CODE: ${getDevelopVersionCode()}\n")
    printf("-> LAST_MASTER_GIT_TAG: ${getLastMasterGitTagVersion()}\n")
    printf("-> PROD_VERSION_CODE: ${getProductionVersionCode()}\n")
    printf("\n----------------------------------\n")
}

@SuppressWarnings("GroovyUnusedDeclaration")
static def getAutoVersionName() {
    def (major, minor, patch, _, sha) = getLastMasterGitTagVersion()
    def code = getAutoVersionCode()
    def date = getBuildDate()
    return (getCurrentBranch() == "master") ? "${major}.${minor}.${patch}" : "${sha}-${date} ($code)"
}

@SuppressWarnings("GroovyUnusedDeclaration")
static def getDevelopVersionCode() {
    def count = getGitCommitsCount()
    return (count == null || count.empty) ? 0 : count.toInteger()
}

@SuppressWarnings("GroovyUnusedDeclaration")
static def getProductionVersionCode() {
    def (major, minor, patch) = getLastMasterGitTagVersion()
    return major.toInteger() * 1_000_000 + minor.toInteger() * 1_000 + patch.toInteger()
}

@SuppressWarnings("GroovyUnusedDeclaration")
static def getAutoVersionCode() {
    def branch = getCurrentBranch()
    if (branch == "master") {
        return getProductionVersionCode()
    }
    return getDevelopVersionCode()
}

static def getCurrentBranch() {
    return "git rev-parse --abbrev-ref HEAD".execute().text.trim()
}

static def getBuildDate() {
    def df = new SimpleDateFormat("dd.MM.yyyy")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

static def getGitCommitsCount() {
    return ("git rev-list ${getCurrentBranch()} --count").execute().text.trim()
}

static def getLastMasterGitTagVersion() {
    def name = "git describe --tags ${getCurrentBranch()} --long".execute().text.
            replace("v", "").
            trim()
    def (tag, build, sha) = name.tokenize('-')
    def (major, minor, patch) = (tag != null) ? tag.tokenize('.') : [0, 0, 0]
    return [major, minor, patch, build, sha]
}

static def getReleaseNotes() {

    def commit = getLatestSavedCommit()

    def format = "\"%h %ad %an: %s\""

    // Get latest commit since last saved commit.
    def gitLog = "git log develop --no-merges --date=short --pretty=format:${format} ${commit}...HEAD"

    // If release notes is empty, get last 10 commits.
    if (commit.empty) {
        gitLog = "git log develop --no-merges --date=short --pretty=format:${format} -10"
    }

    // Get release notes from git lot.
    def releaseNotes = gitLog.execute().text.trim()

    // If there were no changes since last build, put the same release notes as it was before.
    if (releaseNotes.empty) {
        releaseNotes = getReleaseNotesFile().text.trim()
    }

    return releaseNotes
}

static def getLatestSavedCommit() {

    def text = getReleaseNotesFile().readLines()

    if (text.empty) {
        return ""
    }

    // Get first word from release notes (commit hash).
    return text.get(0).split()[0].trim()
}

static def getReleaseNotesFile() {
    return new File("settings/distribute/release-notes.txt")
}

static def downloadReleaseNotes(token) {
    def jsonSlurper = new JsonSlurper()

    // Get release notes download url.
    def fetchArtifactsResult = "curl -v https://api.github.com/repos/JakubMosakowski/ItemistEvolved/actions/artifacts".execute().text
    def resultObject = jsonSlurper.parseText(fetchArtifactsResult)
    def artifactObject = resultObject.artifacts.find  { it.name == "release-notes.txt"}

    // If there is not such artifact, end method.
    if(artifactObject == null) {
        println("No artifact found.")
        return
    }

    def artifactUrl = artifactObject.archive_download_url

    // Download release notes artifact.
    def curlCommand = "curl -v -L -o settings/distribute/releaseNotes.zip ${artifactUrl} --header \"authorization: Bearer $token\" --header \"content-type: application/json\""
    def process = curlCommand.execute()

    println("Error (if happened) during fetching artifact: ${process.err.text}\n")

    // Unzip download release notes artifact.
    "unzip -o -a settings/distribute/releaseNotes.zip -d settings/distribute".execute()
}

//endregion
